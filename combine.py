from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import pandas as pd
import os
import time

def log(func):
    def wrapper():
        print("%s is running" % func.__name__)
        start = time.time()
        model = func()
        print("%s is finished" % func.__name__)
        finish = time.time()
        print("Use time: " + str( finish-start))
        print("score: ", model.score(X_test, y_test))
    return wrapper

rootpath = "/media/zqz/Newsmy/"
subtrainLabel = pd.read_csv(os.path.join(rootpath, 'subtrainLabels.csv'))
subtrainfeature1 = pd.read_csv(os.path.join(rootpath, '3gramfeature.csv'))
subtrainfeature2 = pd.read_csv(os.path.join(rootpath, 'bytesimgfeature.csv'))
subtrainfeature3 = pd.read_csv(os.path.join(rootpath, 'headersfeature.csv'))

subtrain = pd.merge(subtrainfeature1,subtrainfeature2,on='Id')
subtrain = pd.merge(subtrain, subtrainfeature3, on="Id")
subtrain = pd.merge(subtrain,subtrainLabel,on='Id')
labels = subtrain.Class
subtrain.drop(["Class","Id"], axis=1, inplace=True)
subtrain = subtrain.as_matrix()

X_train, X_test, y_train, y_test = train_test_split(subtrain,labels,test_size=0.4)
print("start")


@log
def randomForest():
    from sklearn.ensemble import RandomForestClassifier as RF
    srf = RF(n_estimators=500, n_jobs=-1)
    srf.fit(X_train,y_train)
    return srf


@log
def knn():
    from sklearn.neighbors import KNeighborsClassifier as KNN
    model = KNN()
    model.fit(X_train, y_train)
    return model

@log
def decisionTree():
    from sklearn import tree
    model = tree.DecisionTreeClassifier()
    model.fit(X_train, y_train)
    return model

@log
def GBDT():
    from sklearn.ensemble import GradientBoostingClassifier as GB
    model = GB(n_estimators=500)
    model.fit(X_train, y_train)
    return model

@log
def SVM():
    from sklearn.svm import SVC
    model = SVC(kernel="rbf", probability=True)
    model.fit(X_train, y_train)
    return model

if __name__ == '__main__':
    decisionTree()
    GBDT()
    SVM()
    randomForest()
    knn()
